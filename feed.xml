<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keerat Singh</title>
    <description>A development blog with experiences and helpful tutorials for the latest and greatest technologies.</description>
    <link>https://keeratsingh.github.io/</link>
    <atom:link href="https://keeratsingh.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 10 Sep 2016 21:54:51 -0700</pubDate>
    <lastBuildDate>Sat, 10 Sep 2016 21:54:51 -0700</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Customizing Microsoft Band using Band SDK and UWP</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This idea was on the back burner for quite a while, and I never had the time to pursue this, until last week. I finally sat down and developed a Microsoft Band customization app,
that helps you take advantage of the Band SDK and customize the &lt;code&gt;BandTheme&lt;/code&gt;. I know the &lt;strong&gt;Microsoft Health&lt;/strong&gt; app allows you to customize the BandTheme using various styles, however, I found
it is &lt;strong&gt;limiting in terms of granular customization&lt;/strong&gt;, which inspired me to develop this app, which helps you to customize each and every &lt;code&gt;Band Color&lt;/code&gt; class.
Another thing I felt the Microsoft Health app &lt;strong&gt;lacked in terms of Band personalization&lt;/strong&gt; was the visual UI that helped the user interpret how the theme actually
affected the Band Tiles. This UWP application actually helps the user have a better understanding towards which parts of the Band are being customized.&lt;br /&gt;
This post will help you guide through the &lt;code&gt;Band SDK&lt;/code&gt; functions used to retrieve and update the BandTheme. 
There are 8 color classes that exist on the Band, however, only &lt;strong&gt;6 of the 8 can be customized&lt;/strong&gt; using the Band SDK.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;High&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contrast&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lowlight&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Highlight&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Muted&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Secondary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;connecting-to-the-band&quot;&gt;Connecting to the Band&lt;/h2&gt;
&lt;p&gt;The initial step is to connect to a paired Band to the device on which your application is running. 
We use the &lt;code&gt;BandClientManager&lt;/code&gt; to get a list of paired Bands and connect to the first Band.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Get the list of paired Bands&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairedBands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BandClientManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetBandsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Connect to the first Band&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairedBands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Connect to the Band and get a new BandClient object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bandClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BandClientManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;postImg&quot;&gt;
&lt;figure&gt;
    &lt;img class=&quot;postImg&quot; src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Connecting_to_the_Band.jpg&quot; alt=&quot;Connecting to Microsoft Band&quot; /&gt;
    &lt;figcaption&gt;Connecting to Microsoft Band&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;retrieving-the-band-theme&quot;&gt;Retrieving the Band Theme&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;PersonalizationManager&lt;/code&gt; allows us to retrieve the color classes currently being used on the Band device using the &lt;code&gt;BandTheme&lt;/code&gt; class.
The Band Theme is retrieved using the &lt;code&gt;GetThemeAsync&lt;/code&gt; method and stored into an object of the BandTheme class.
After the theme is retrieved, the UI is updated respectively, by converting the &lt;code&gt;BandColor&lt;/code&gt; to &lt;code&gt;SolidColorBrush&lt;/code&gt; and updating the &lt;code&gt;Fill&lt;/code&gt; property of the ellipse.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Retrieve theme from the band&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BandTheme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersonalizationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetThemeAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Update the UI&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eHighContrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HighContrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eHighlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Highlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eLowLight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lowlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eMuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Muted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eSecondary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecondaryText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;postImg&quot;&gt;
&lt;figure&gt;
    &lt;img class=&quot;postImg&quot; src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Theme_Retrieved.jpg&quot; alt=&quot;Connected and successfully retrieved the BandTheme&quot; /&gt;
    &lt;figcaption&gt;Connected and successfully retrieved the theme&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;personalizing-the-band-theme&quot;&gt;Personalizing the Band Theme&lt;/h2&gt;
&lt;p&gt;The application allows the user to customize all the 6 available Band color classes individually. Your can click on each class to bring out a color dialog box.
This color dialog box gives you the option of either choosing a color from a &lt;strong&gt;predefined list of colors&lt;/strong&gt;, included in the &lt;code&gt;Windows.UI.Colors&lt;/code&gt; or entering a &lt;strong&gt;custom color Hex Code&lt;/strong&gt;.&lt;br /&gt;
Each Band color class has its own row and the application UI reflects how each Band color class affects the Microsoft Band UI.&lt;/p&gt;
&lt;h3&gt;Choosing color from ComboBox&lt;/h3&gt;
&lt;p&gt;Currently, there are &lt;strong&gt;141 colors&lt;/strong&gt; to choose from &lt;code&gt;Windows.UI.Colors&lt;/code&gt;, since the list is dynamically generated at runtime, 
any new colors added to Windows.UI.Colors will be added to the &lt;code&gt;ComboBox&lt;/code&gt; automatically.&lt;/p&gt;
&lt;div class=&quot;postImg&quot;&gt;
&lt;figure&gt;
    &lt;img src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Personalizing_2a_1.jpg&quot; alt=&quot;Choosing color using ComboBox&quot; /&gt;
    &lt;img src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Personalizing_2a_2.jpg&quot; alt=&quot;Choosing color using ComboBox&quot; /&gt;
     &lt;figcaption&gt;Choosing color using ComboBox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h3&gt;Entering a Custom color hex value&lt;/h3&gt;
&lt;p&gt;You can also define a custom color, using the hex value of the color. You can use your favorite program to get the hex value or use this wonderful site that I really like 
&lt;a href=&quot;http://www.color-hex.com&quot;&gt;hex-color&lt;/a&gt;. The hex code can be entered with or without the # symbol.&lt;/p&gt;
&lt;div class=&quot;postImg&quot;&gt;
&lt;figure&gt;
    &lt;img src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Personalizing_2b_1.jpg&quot; alt=&quot;Choosing color using hex value&quot; /&gt;
    &lt;img src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Personalizing_2b_2.jpg&quot; alt=&quot;Choosing color using hex value&quot; /&gt;
     &lt;figcaption&gt;Choosing color using hex value&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uploading-the-band-theme&quot;&gt;Uploading the Band Theme&lt;/h2&gt;
&lt;p&gt;Once you have customized the UWP application UI, we need to upload the theme to the connected Band device. We do that by clicking the &lt;strong&gt;accept icon&lt;/strong&gt;, which
calls the &lt;code&gt;SetThemeAsync&lt;/code&gt; method. We create a new &lt;code&gt;BandTheme&lt;/code&gt; object using the color values set by the user and then call the SetThemeAsync, with the BandTheme
object as the argument. A message is displayed on the UI once the BandTheme is uploaded successfully.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Convert user customizations into Band theme.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BandTheme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToBandColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HighContrast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eHighContrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToBandColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Lowlight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eLowLight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToBandColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Highlight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eHighlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToBandColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Muted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eMuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToBandColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SecondaryText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eSecondary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToBandColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Update Band with the theme.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersonalizationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetThemeAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;postImg&quot;&gt;
&lt;figure&gt;
    &lt;img src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Upload_Theme_1.jpg&quot; alt=&quot;Uploading theme to Band&quot; /&gt;
    &lt;img src=&quot;\images\posts\2016-09-07-customizing-microsoft-band-using-band-sdk-uwp\Upload_Theme_2.jpg&quot; alt=&quot;Upload completed&quot; /&gt;
    &lt;figcaption&gt;Uploading theme to Microsoft Band&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;You can find the &lt;strong&gt;source code&lt;/strong&gt; at Github &lt;a href=&quot;https://github.com/keeratsingh/bandManager&quot;&gt;bandManager repo&lt;/a&gt; along with the &lt;code&gt;Visual Studio 2015&lt;/code&gt; solution.&lt;/p&gt;

&lt;h2 id=&quot;final-note&quot;&gt;Final note&lt;/h2&gt;
&lt;p&gt;This UWP application is very basic demonstration of using the &lt;strong&gt;Microsoft Band SDK&lt;/strong&gt; to interact and personalize the Band. A lot more things can be done with the SDK, such as subscribe to sensors 
and use the data from the sensors, or update the &lt;strong&gt;MeTile&lt;/strong&gt;. This is application does not use the &lt;code&gt;RelativePanel&lt;/code&gt; or &lt;code&gt;VisualState&lt;/code&gt; class to make the application dynamically 
adjust to the screen size, since that was not the motive of this app.
If you still face any problems or have any questions, feel free to leave a comment and I will be happy to help. Cheers :)&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Sep 2016 14:05:00 -0700</pubDate>
        <link>https://keeratsingh.github.io/blog/2016/customizing-microsoft-band-using-band-sdk-uwp/</link>
        <guid isPermaLink="true">https://keeratsingh.github.io/blog/2016/customizing-microsoft-band-using-band-sdk-uwp/</guid>
        
        
        <category>UWP,Band</category>
        
      </item>
    
      <item>
        <title>Font icons in UWP using Segoe MDL2 and Segoe UI</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;While developing a UWP app to customize the Microsoft Band, I realized, there was no way to retrieve icons from the default band tiles, therefore 
I decided to go the old way of displaying icons, that is using images. Now, since it is a &lt;strong&gt;Universal Platform Application&lt;/strong&gt;, it is expected to work across many different windows 10 platforms and screen sizes.
One solution is to use an image file as an icon, which is pretty common, however, the image gets pixelated when the image and the screen size increases.
We can use different icon files for different screen sizes, however, it is too much of hassle.  &lt;br /&gt;
An easier solution I found is to use font icons, already predefined in the fonts &lt;strong&gt;Segoe MDL2 Assets and Segoe UI Symbol&lt;/strong&gt;, the best part is you can bind the font size 
to a particular value, depending upon the screen size everything else is taken care of. Another benefit of using font icons is that, in case you change the theme from light to dark, 
the icons are updated as well, depending on the theme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Segoe MDL2 Assets&lt;/strong&gt; is a Windows 10 font that replaces Windows 8/8.1 font &lt;strong&gt;Segoe UI Symbols&lt;/strong&gt;. Some of the &lt;strong&gt;Segoe MDL2 Assets&lt;/strong&gt; icons are also available through 
&lt;code class=&quot;highlighter-pygments&quot;&gt;Symbol Enumeration&lt;/code&gt;, which I will discuss in this post as well. 
For list of symbols, available refer to this MSDN article &lt;a href=&quot;https://msdn.microsoft.com/en-us/windows/uwp/style/segoe-ui-symbol-font&quot;&gt;Segoe MDL2 icons&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-textblock&quot;&gt;Using TextBlock&lt;/h2&gt;
&lt;p&gt;TextBlock is a FrameworkElement control that is used to display small amounts of text. We set the &lt;code class=&quot;highlighter-pygments&quot;&gt;Text&lt;/code&gt; property of the &lt;code class=&quot;highlighter-pygments&quot;&gt;TextBlock&lt;/code&gt; 
control to the Unicode Value of the symbol we want to use. In our example below we have different symbols as the &lt;code class=&quot;highlighter-pygments&quot;&gt;Text&lt;/code&gt; property.&lt;/p&gt;
&lt;h3&gt;Using Segoe MDL2 Assets&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;#xEB52; &amp;amp;#xEB51; &amp;amp;#xEB68;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontFamily=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Segoe MDL2 Assets&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Using Segoe UI Symbols&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;#xE200; &amp;amp;#xE1D6; &amp;amp;#xE181;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontFamily=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Segoe UI Symbol&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;using-fonticon&quot;&gt;Using FontIcon&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-pygments&quot;&gt;FontIcon&lt;/code&gt; is a generalized version of &lt;code class=&quot;highlighter-pygments&quot;&gt;SymbolIcon&lt;/code&gt;, that inherits from &lt;code class=&quot;highlighter-pygments&quot;&gt;IconElement&lt;/code&gt; class. 
It is pretty similar to the &lt;code class=&quot;highlighter-pygments&quot;&gt;TextBlock&lt;/code&gt; control, 
however, we set the &lt;code class=&quot;highlighter-pygments&quot;&gt;Glyph&lt;/code&gt; property instead of &lt;code class=&quot;highlighter-pygments&quot;&gt;Text&lt;/code&gt; property in the case of &lt;code class=&quot;highlighter-pygments&quot;&gt;FontIcon&lt;/code&gt; control. 
Instead of using a predefined set of symbols from &lt;strong&gt;Segoe MDL2 Assets&lt;/strong&gt;, you can specify the Unicode value and choose from the list of available icons.
You can even specify a different font, such as &lt;strong&gt;Segoe UI Symbols&lt;/strong&gt; and specify respective Unicode value.&lt;/p&gt;
&lt;h3&gt;Using Segoe MDL2 Assets&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;FontIcon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Glyph=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;#xEB52; &amp;amp;#xEB51;  &amp;amp;#xEB68;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontFamily=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Segoe MDL2 Assets&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Using Segoe UI Symbols&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;FontIcon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Glyph=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp;#xE200; &amp;amp;#xE1D6; &amp;amp;#xE181;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontFamily=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Segoe UI Symbol&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;using-symbolicon&quot;&gt;Using SymbolIcon&lt;/h2&gt;
&lt;p&gt;Both the &lt;code class=&quot;highlighter-pygments&quot;&gt;SymbolIcon&lt;/code&gt; and &lt;code class=&quot;highlighter-pygments&quot;&gt;FontIcon&lt;/code&gt; inherit from the same class &lt;code class=&quot;highlighter-pygments&quot;&gt;IconElement&lt;/code&gt;, 
however &lt;code class=&quot;highlighter-pygments&quot;&gt;SymbolIcon&lt;/code&gt; is constrained to a predefined set of Segoe MDL2 icons.&lt;/p&gt;
&lt;h3&gt;Using Segoe MDL2 Assets&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;SymbolIcon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Symbol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Favorite&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;SymbolIcon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Symbol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Camera&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;SymbolIcon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Symbol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Mail&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;display-font-icons-using-c&quot;&gt;Display font icons using C#&lt;/h2&gt;
&lt;p&gt;Font icons can also be displayed very easily using &lt;code class=&quot;highlighter-pygments&quot;&gt;C#&lt;/code&gt; by updating the respective code behind file.
Just update the respective &lt;code class=&quot;highlighter-pygments&quot;&gt;Gylph&lt;/code&gt; or &lt;code class=&quot;highlighter-pygments&quot;&gt;Text&lt;/code&gt; property of the control you want to display the font icons in.
The only difference in C# is that the Unicode value is escaped differently using ‘\u’.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;FontIconCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Glyph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\uE1D0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;txtFontIconCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\uE1D0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;icons-in-action&quot;&gt;Icons in action&lt;/h2&gt;
&lt;p&gt;This is how &lt;strong&gt;Segoe MDL2&lt;/strong&gt; and &lt;strong&gt;Segoe UI&lt;/strong&gt; font icons look on a UWP app.&lt;br /&gt;
&lt;img src=&quot;\images\posts\2016-09-05-using-font-icons-uwp-segoe-mdl2\FontIcons.jpg&quot; alt=&quot;Windows 10 UWP Font Icons Segoe MDL2 Segoe UI&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;You can find the &lt;strong&gt;source code&lt;/strong&gt; at Github &lt;a href=&quot;https://github.com/keeratsingh/FontIcons&quot;&gt;fontIcons repo&lt;/a&gt; along with the &lt;code&gt;Visual Studio 2015&lt;/code&gt; solution.&lt;/p&gt;

&lt;h2 id=&quot;final-note&quot;&gt;Final note&lt;/h2&gt;
&lt;p&gt;The best part about font icons is that you don’t have to worry about pixelated icons anymore. :)&lt;br /&gt;
If you still face any problems or have any questions, feel free to leave a comment and I will be happy to help. Cheers :)&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 05:50:52 -0700</pubDate>
        <link>https://keeratsingh.github.io/blog/2016/using-font-icons-uwp-segoe-mdl2/</link>
        <guid isPermaLink="true">https://keeratsingh.github.io/blog/2016/using-font-icons-uwp-segoe-mdl2/</guid>
        
        
        <category>UWP</category>
        
      </item>
    
      <item>
        <title>Get Bing Image of the Day using C# UWP Application</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bing Image of the Day&lt;/strong&gt; has become quite popular over the years, it comprises of essentially the most spectacular user-submitted images from all over the world 
which have been showcased on the Bing homepage for the past 5 years. I have absolutely loved the &lt;strong&gt;Bing Wallpaper&lt;/strong&gt; of the day part of the Bing desktop 
application. &lt;strong&gt;Bing desktop&lt;/strong&gt; app changes your wallpaper every day to Bing Image of the Day, which is pretty cool and gives you a peace of mind without 
having to change the wallpaper every day manually. The somewhat similar concept has been used in &lt;strong&gt;Windows Phone&lt;/strong&gt; as well, where you can set 
the lock screen to the Bing Image of the Day.&lt;/p&gt;

&lt;p&gt;I was so interested in the idea that I wanted to &lt;strong&gt;try out myself&lt;/strong&gt; building an app to retrieve the Bing Image. I knew once I could retrieve the image, 
I had &lt;strong&gt;numerous possibilities&lt;/strong&gt; going forward. I could save it and change my desktop after a certain duration of my choice, or set it as my lock screen 
just as a desktop wallpaper, you get my point, the key here is to get the Bing Image of the Day.&lt;/p&gt;

&lt;p&gt;Fortunately, Bing has a &lt;code&gt;REST API&lt;/code&gt; to retrieve a &lt;code&gt;JSON&lt;/code&gt; string which contains the &lt;strong&gt;URL to 
the Bing Image&lt;/strong&gt;, which we will be making use of. 
That is the easy part, now the hard part is to parse and retrieve the URL from the JSON string. I will be discussing in detail the &lt;strong&gt;different methods&lt;/strong&gt; that can be used for 
parsing and how they can be used to extract the &lt;strong&gt;Bing Image URL&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-1-retrieve-the-json-string&quot;&gt;Step 1. Retrieve the JSON string:&lt;/h2&gt;
&lt;p&gt;The first step is to retrieve the &lt;strong&gt;JSON&lt;/strong&gt; string from the &lt;strong&gt;Bing REST API&lt;/strong&gt; endpoint. 
We retrieve the string using an &lt;code&gt;HttpClient&lt;/code&gt;,we have an option of using &lt;code&gt;Windows.Web.Http&lt;/code&gt; or &lt;code&gt;System.Net.Http&lt;/code&gt; namespace. &lt;br /&gt;
I prefer to choose Windows.Web.Http.HttpClient for the simple reason that the System.Net.Http.HttpClient might get &lt;strong&gt;deprecated&lt;/strong&gt; over time. Another reason is that 
&lt;strong&gt;System.Net.Http.HttpClient supports only .Net Languages&lt;/strong&gt;, whereas Windows.Web.Http.HttpClient was written with the aim of &lt;strong&gt;consolidating all the 
HTTP APIs&lt;/strong&gt; for different Windows Application Languages, and therefore it supports all the Windows Store 
application languages. For the avid readers &lt;a href=&quot;https://blogs.windows.com/buildingapps/2015/11/23/demystifying-httpclient-apis-in-the-universal-windows-platform/&quot;&gt;here&lt;/a&gt; is a &lt;strong&gt;detailed comparison&lt;/strong&gt; between the two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// We can specify the region we want for the Bing Image of the Day.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strRegion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strBingImageURL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.bing.com/HPImageArchive.aspx?format=js&amp;amp;idx=0&amp;amp;n={0}&amp;amp;mkt={1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_numOfImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strJSONString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Using an Async call makes sure the app is responsive during the time the response is fetched.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// GetAsync sends an Async GET request to the Specified URI.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strBingImageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Content property get or sets the content of a HTTP response message. &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ReadAsStringAsync is a method of the HttpContent which asynchronously &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// reads the content of the HTTP Response and returns as a string.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strJSONString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAsStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-2-parse-the-json-string&quot;&gt;Step 2. Parse the JSON string:&lt;/h2&gt;
&lt;p&gt;Now we can parse the retrieved JSON string using 3 methods&lt;br /&gt;
• Using &lt;code&gt;Windows.Data.Json&lt;/code&gt; (&lt;em&gt;Native Way&lt;/em&gt;)&lt;br /&gt;
• Using &lt;code&gt;LINQ-to-JSON&lt;/code&gt; API’s JObject from &lt;code&gt;JSON.NET&lt;/code&gt; (&lt;em&gt;Newtonsoft&lt;/em&gt;)  &lt;br /&gt;
• Using &lt;code&gt;dynamic&lt;/code&gt; object and &lt;code&gt;DeserializeObject&lt;/code&gt; method JSON.NET (&lt;em&gt;Newtonsoft&lt;/em&gt;)&lt;br /&gt;
&lt;strong&gt;JSON.Net&lt;/strong&gt; has existed since long before Windows.Data.Json came into existence, however, Microsoft introduced Windows.Data.Json with &lt;strong&gt;native support&lt;/strong&gt; for parsing JSON.
To use JSON.NET, you need to &lt;strong&gt;add&lt;/strong&gt; the &lt;code&gt;Newtonsoft&lt;/code&gt; Nuget package, which adds an additional library dependency.
I personally prefer the native way, however for the purpose of this app I have discussed both the ways of parsing the JSON string using both &lt;strong&gt;JSON.NET&lt;/strong&gt; and &lt;strong&gt;Windows.Data.Json namespaces&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retrieved JSON string:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;startdate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;20160719&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;fullstartdate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;201607190700&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;enddate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;20160720&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/az/hprichbg/rb/NeonMuseum_EN-US8131993872_1920x1080.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;urlbase&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/az/hprichbg/rb/NeonMuseum_EN-US8131993872&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Neon Museum, Las Vegas, Nevada (© Kerrick James/Getty Images)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;copyrightlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.bing.com/search?q=neon+museum&amp;amp;form=hpcapt&amp;amp;filters=HpDate:%2220160719_0700%22&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;wp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;hsh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;96d3e7bbe87ad583a17ef765ed935d8f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;drk&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;bot&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;hs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;startdate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;20160718&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;fullstartdate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;201607180700&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;enddate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;20160719&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/az/hprichbg/rb/DiamondHead_EN-US10119574903_1920x1080.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;urlbase&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/az/hprichbg/rb/DiamondHead_EN-US10119574903&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Aerial view of Diamond Head, O’ahu, Hawaii (© Biederbick &amp;amp; Rumpf/Offset)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;copyrightlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.bing.com/search?q=diamond+head+hawaii&amp;amp;form=hpcapt&amp;amp;filters=HpDate:%2220160718_0700%22&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;wp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;hsh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1aff492416f5e2fcf6e898743154fbda&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;drk&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;bot&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;hs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;startdate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;20160717&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;fullstartdate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;201607170700&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;enddate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;20160718&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/az/hprichbg/rb/MuizenbergSA_EN-US9176714978_1920x1080.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;urlbase&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/az/hprichbg/rb/MuizenbergSA_EN-US9176714978&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Beach huts in Muizenberg, South Africa (© Getty Images)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;copyrightlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.bing.com/search?q=Muizenberg,+South+Africa&amp;amp;form=hpcapt&amp;amp;filters=HpDate:%2220160717_0700%22&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;wp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;hsh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;8d4bf37f9d61ab103283005264b4b8cb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;drk&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;bot&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;hs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;tooltips&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;loading&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Loading...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Previous image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Next image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;walle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;This image is not available to download as wallpaper.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;walls&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Download this image. Use of this image is restricted to wallpaper only.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2a-parsing-json-string-using-windowsdatajson&quot;&gt;Step 2a. Parsing JSON string using Windows.Data.Json:&lt;/h3&gt;
&lt;p&gt;This Method parses the fetched JSON string and retrieves the Image URLs using &lt;code&gt;Microsoft Windows.Data.Json&lt;/code&gt; class. We use &lt;code&gt;JsonObject&lt;/code&gt; 
that implements an &lt;strong&gt;IMap interface&lt;/strong&gt;, which can help in manipulating the &lt;strong&gt;name/value&lt;/strong&gt; pairs like a &lt;strong&gt;dictionary&lt;/strong&gt;. We use &lt;code&gt;JsonObject.TryParse&lt;/code&gt; 
method to parse the JSON string into a JSON value, it returns a boolean value, indicating success or failure.
The integral part of the retrieval is &lt;code&gt;jsonObject[&quot;images&quot;].GetArray()[i].GetObject()[&quot;url&quot;].GetString()&lt;/code&gt;.
As seen in the above JSON string, we have a root object &lt;code&gt;&quot;images&quot;&lt;/code&gt;, it further has 3 arrays, which are equal to the &lt;strong&gt;number of images&lt;/strong&gt; specified in &lt;strong&gt;Step 1.&lt;/strong&gt;
Each &lt;strong&gt;array&lt;/strong&gt; has an object called &lt;strong&gt;url&lt;/strong&gt;, which is the part of the url to the Bing Image. We retrieve url for each image and store it into a list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Parse using Windows.Data.Json.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolParsed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_strRawJSONString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boolParsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_numOfImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;_lstBingImageURLs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2b-parsing-json-string-using-linq-to-json-apis-jobject&quot;&gt;Step 2b. Parsing JSON string using LINQ-to-JSON API’s JObject:&lt;/h3&gt;
&lt;p&gt;This Method parses the fetched JSON string and retrieves the Image URLs using &lt;code&gt;LINQ-to-JSON&lt;/code&gt; API’s 
&lt;code&gt;JObject&lt;/code&gt; explicitly.We use this method when we &lt;strong&gt;don’t know the JSON structure&lt;/strong&gt;
ahead of time. This method is recommended if only &lt;strong&gt;one or two values&lt;/strong&gt; from the whole JSON string are required.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Parse using LINQ-to-JSON API&amp;#39;s JObject explicitly.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jResults&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_strRawJSONString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_lstBingImageURLs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2c-parsing-json-string-using-deserializeobject-and-dynamic-object&quot;&gt;Step 2c. Parsing JSON string using DeserializeObject and dynamic object&lt;/h3&gt;
&lt;p&gt;This Method parses the fetched JSON string and retrieves the Image URLs using &lt;code&gt;DeserializeObject&lt;/code&gt; method. 
We use &lt;code&gt;JsonConvert.DeserializeObject&lt;/code&gt; method when &lt;strong&gt;already know the JSON structure&lt;/strong&gt; and the &lt;strong&gt;strongly typed class&lt;/strong&gt; we want to deserialize into. 
We use &lt;code&gt;dynamic&lt;/code&gt; object, as it saves us the trouble of declaring a specific class to hold the JSON object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Parse using DeserializeObject method.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_numOfImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_lstBingImageURLs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_strRawJSONString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-3-display-images-on-ui-using-bitmapimage&quot;&gt;Step 3. Display images on UI using BitmapImage:&lt;/h2&gt;
&lt;p&gt;Each URL is converted into a Bitmap Image and added into the Stack Panel dynamically to display as an Image Object.
&lt;code&gt;BitmapImage&lt;/code&gt; class inherits from the &lt;code&gt;BitmapSource&lt;/code&gt; class and is specialized 
&lt;code&gt;BitmapSource&lt;/code&gt; that is optimized for loading images using XAML.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lstBingImageURLs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We use the Image control to display an image on the UI.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgbingImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bingURL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.bing.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BitmapSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgbingImageSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BitmapImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bingURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;imgbingImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgbingImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Add the Image control to the Stack Panel&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imgbingImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;working-windows-10-uwp-app&quot;&gt;Working Windows 10 UWP App:&lt;/h2&gt;
&lt;p&gt;Here is the &lt;strong&gt;screenshot&lt;/strong&gt; of the working &lt;strong&gt;Windows 10 UWP&lt;/strong&gt; app, I have hosted the &lt;strong&gt;Visual Studio&lt;/strong&gt; solution file with source code at Github Repository 
&lt;a href=&quot;https://github.com/keeratsingh/bing-Image-JSON&quot;&gt;Bing-Image-JSON&lt;/a&gt; which you can use to &lt;strong&gt;experiment yourself&lt;/strong&gt;.
&lt;img src=&quot;\images\posts\2016-08-19-bing-image-json-csharp-uwp\BIOD.jpg&quot; alt=&quot;Windows 10 UWP Bing Image of the Day&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-note&quot;&gt;Final note:&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;source code&lt;/strong&gt; at the &lt;a href=&quot;https://github.com/keeratsingh/bing-Image-JSON&quot;&gt;Github repo&lt;/a&gt; contains the full detailed code, which you can use to experiment and follow along.
If you still face any problems or have any questions, feel free to leave a comment and I will be happy to help. Cheers :)&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Aug 2016 10:27:52 -0700</pubDate>
        <link>https://keeratsingh.github.io/blog/2016/bing-image-api-json-csharp-uwp/</link>
        <guid isPermaLink="true">https://keeratsingh.github.io/blog/2016/bing-image-api-json-csharp-uwp/</guid>
        
        
        <category>UWP,Bing</category>
        
      </item>
    
      <item>
        <title>Setting up a Jekyll blog using Windows 10 Bash and hosting on GitHub Pages</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I started on a journey to setup my personal Github.io page and I had no prior experience of &lt;code class=&quot;highlighter-pygments&quot;&gt;Jekyll&lt;/code&gt;, &lt;code class=&quot;highlighter-pygments&quot;&gt;Ruby&lt;/code&gt; or setting up a page on GitHub.
There were some initial hurdles understanding and configuring the blog, but fortunately, I was able to overcome them all and setup my very own personal GitHub.io page :)&lt;/p&gt;

&lt;p&gt;I watched some videos on YouTube, however most of them missed a really important part, the part of setting up Jekyll on windows 10 and compiling the source code into a static website.
Jekyll is not officially supported on windows, but there are workarounds to setup Jekyll on windows, which I will discuss in this post. I figured it would be really helpful for first timers to have a useful guide on how to setup a GitHub.io page using Jekyll on Windows 10.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-Requisites&lt;/h2&gt;
&lt;p&gt;Before you start, you will need &lt;code class=&quot;highlighter-pygments&quot;&gt;Windows Subsystem for Linux aka Bash&lt;/code&gt; on windows feature enabled. 
If you have no idea on how to get the bash setup, refer to this &lt;a href=&quot;http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/&quot;&gt;wonderful guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-download-the-theme&quot;&gt;Step 1. Download the Theme:&lt;/h2&gt;
&lt;p&gt;After you are done setting up, the next part is choosing a wonderful theme for your blog. Head over to Jekyll Themes to find a theme.
I will be using &lt;a href=&quot;http://jekyllthemes.org/themes/emerald/&quot;&gt;Emerald theme&lt;/a&gt; for our example.
Click the download link to download the zip file containing the source files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\posts\2016-08-05-setting-up-blog-github-page\1.png&quot; alt=&quot;Theme download location&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can go to github.com and download the source code from the GitHub repository &lt;a href=&quot;https://github.com/kingFelix/emerald&quot;&gt;KingFelix/emerald&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\posts\2016-08-05-setting-up-blog-github-page\1a.png&quot; alt=&quot;Theme download location GitHub&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-setting-up-the-windows-10-environment&quot;&gt;Step 2. Setting up the Windows 10 environment:&lt;/h2&gt;
&lt;p&gt;Now we will setup our local environment required to build the source code that we just downloaded on Windows 10.
There are different ways to setup a Jekyll server locally which you can use as desired. The one I found most convenient was installing the packages on the bash shell and 
setting up a Jekyll server on Bash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\posts\2016-08-05-setting-up-blog-github-page\2.png&quot; alt=&quot;Linux Bash Shell Windows 10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Extract the zip file and open the bash shell. We need to install &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby&lt;/code&gt; and &lt;code class=&quot;highlighter-pygments&quot;&gt;jekyll&lt;/code&gt; before we do anything. Here are the steps to follow.&lt;/p&gt;

&lt;h3 id=&quot;step-2a-switching-to-root&quot;&gt;Step 2a. Switching to Root:&lt;/h3&gt;
&lt;p&gt;We need root permissions to install the packages, else you will get a permission denied error.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo -s &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2b-installing-gcc-and-make&quot;&gt;Step 2b. Installing gcc and make:&lt;/h3&gt;
&lt;p&gt;Since the ubuntu bash shell is almost empty and has no packages like &lt;code class=&quot;highlighter-pygments&quot;&gt;gcc&lt;/code&gt; and &lt;code class=&quot;highlighter-pygments&quot;&gt;make&lt;/code&gt; installed, we will install gcc and make.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get update
apt-get install gcc
apt-get install make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2c-installing-ruby-from-brightbox-recommended-method&quot;&gt;Step 2c. Installing Ruby from Brightbox [Recommended Method]:&lt;/h3&gt;
&lt;p&gt;We will need &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby&lt;/code&gt; and &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby-dev&lt;/code&gt; package to compile and build the Jekyll code and its dependencies. 
The reason why we need &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby-dev&lt;/code&gt; is because some Jekyll dependencies are just source files, which need to be compiled into binaries/executables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install software-properties-common
apt-add-repository ppa:brightbox/ruby-ng
apt-get update
apt-get install ruby2.3 ruby2.3-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2c-installing-ruby-alternate-method&quot;&gt;Step 2c. Installing Ruby [Alternate Method]:&lt;/h3&gt;
&lt;p&gt;Make sure the &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby&lt;/code&gt; version is at least 2.0 as &lt;code class=&quot;highlighter-pygments&quot;&gt;jekyll&lt;/code&gt; requires a minimum &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby&lt;/code&gt; version 2.0. The current latest stable release is 2.3.1.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install ruby
apt-get install ruby-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2d-setting-the-ruby-version&quot;&gt;Step 2d. Setting the Ruby version:&lt;/h3&gt;
&lt;p&gt;Just to be sure, change the default Ruby version to 2.3, we can switch the default Ruby version using the &lt;code class=&quot;highlighter-pygments&quot;&gt;ruby-switch&lt;/code&gt; tool.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install ruby-switch
ruby-switch --set ruby2.3
ruby -v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2e-installing-bundler&quot;&gt;Step 2e. Installing Bundler:&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-pygments&quot;&gt;Bundler&lt;/code&gt; is an easy way to track and install the required and dependent gems which will make our life easier, therefore it is a good time now to install bundler.
Once installation completes check the version using the -v flag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install bundler
bundler -v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2f-installing-jekyll&quot;&gt;Step 2f. Installing Jekyll:&lt;/h3&gt;
&lt;p&gt;Even though Jekyll is not supported officially on Windows, it is fully supported on Linux, therefore we will take advantage of that. 
To install Jekyll run the following command and it will install all &lt;code class=&quot;highlighter-pygments&quot;&gt;jekyll&lt;/code&gt; and its dependencies. 
Once installation completes check the version using the -v flag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install jekyll
jekyll -v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-3-building-and-serving-website&quot;&gt;Step 3. Building and serving website:&lt;/h2&gt;
&lt;p&gt;Extract the zip file you downloaded in step 1 and go to the download location from the bash shell.
All the local drives are present in the &lt;code class=&quot;highlighter-pygments&quot;&gt;/mnt/&lt;/code&gt; folder.&lt;br /&gt;
For example:&lt;br /&gt;
Windows Location: &lt;code class=&quot;highlighter-pygments&quot;&gt;D:\emerald-master\emerald-master&lt;/code&gt; &lt;br /&gt;
Bash Location: &lt;code class=&quot;highlighter-pygments&quot;&gt;/mnt/d/emerald-master/emerald-master &lt;/code&gt; &lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /mnt/d/emerald-master/emerald-master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-3a-configuring-the-configyml-file&quot;&gt;Step 3a. Configuring the _config.yml file:&lt;/h3&gt;
&lt;p&gt;Open up any text editor and edit the &lt;code class=&quot;highlighter-pygments&quot;&gt;_config.yml&lt;/code&gt; file before we start building.
Add the following line in the build settings “gems: [jekyll-paginate]”.
&lt;code class=&quot;highlighter-pygments&quot;&gt;jekyll-paginate&lt;/code&gt; is a plugin which helps us in displaying the posts into a smaller list of posts on the main page.
After adding the line your build setting will look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Build settings&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/emerald/&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Change this to your relative path (ex: /blog/), or leave just a /&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;./_site&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/:title&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;paginate_path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/page:num/&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jekyll-paginate&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-3b-building-and-serving-the-website-locally&quot;&gt;Step 3b. Building and serving the website locally:&lt;/h3&gt;
&lt;p&gt;Navigate to the root of your source code folder containing the  &lt;code class=&quot;highlighter-pygments&quot;&gt;_config.yml&lt;/code&gt; to build and serve the website and execute the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Jekyll monitors your source code and regenerates files on the fly by default.
This is termed as watching the source folder for any changes, and in some cases, Jekyll might fail to watch when you try to serve your website.
If you get an error similar to &lt;code class=&quot;highlighter-pygments&quot;&gt;&quot;Error:  Invalid argument - Failed to watch&quot;&lt;/code&gt;,  just execute the following command and would resolve your issue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll serve --force_polling&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If in some cases it still fails to watch, just serve the website using the &lt;code class=&quot;highlighter-pygments&quot;&gt;--no-watch&lt;/code&gt; flag, which essentially means you will have to build and serve every time you make a change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll serve --no-watch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-3c-opening-the-website-locally&quot;&gt;Step 3c. Opening the website locally:&lt;/h3&gt;
&lt;p&gt;Once the build and serve are completed in step 3b, you should get an output similar to the one given below. There are 3 main elements to look out for&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-pygments&quot;&gt;Configuration file&lt;/code&gt;:  This tells us the configuration file used. Make sure the correct file is used.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-pygments&quot;&gt;Destination&lt;/code&gt;:  This tells us the output folder, in which the source code is built into.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-pygments&quot;&gt;Server address&lt;/code&gt;:  This tells us the local address of the website, which we can use to visit our website hosted on a local server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to the server address &lt;code class=&quot;highlighter-pygments&quot;&gt;http://127.0.0.1:4000/emerald/&lt;/code&gt; to see your website.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Configuration file: /mnt/d/emerald-master/emerald-master/_config.yml
Source: .
Destination: ./_site
Incremental build: disabled. Enable with --incremental
Generating...
                    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; in 0.744 seconds.
Auto-regeneration: enabled &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
Configuration file: /mnt/d/emerald-master/emerald-master/_config.yml
Server address: http://127.0.0.1:4000/emerald/
Server running... press ctrl-c to stop.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-4-hosting-and-uploading-the-website-on-githubio&quot;&gt;Step 4. Hosting and uploading the website on Github.io:&lt;/h2&gt;
&lt;p&gt;After you have setup and tested everything locally, the next part is setting up a GitHub repository with the &lt;code class=&quot;highlighter-pygments&quot;&gt;username.github.io&lt;/code&gt;, where username is your username on GitHub. Be very careful to make sure the username is correct, as a mismatching username will not work.  Once a new repository is created online, we will upload the site that we have built locally onto the repository &lt;code class=&quot;highlighter-pygments&quot;&gt;username.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;step-4a-setup-and-push-your-code-to-github-repo-usernamegithubio&quot;&gt;Step 4a. Setup and push your code to GitHub repo username.github.io:&lt;/h3&gt;
&lt;p&gt;Note the destination folder in step 3c, the default destination folder is &lt;code class=&quot;highlighter-pygments&quot;&gt;_site&lt;/code&gt;.
From your root source folder, navigate into the &lt;code class=&quot;highlighter-pygments&quot;&gt;_site&lt;/code&gt; folder, initialize a new git repository, commit the change and push them to 
repository &lt;code class=&quot;highlighter-pygments&quot;&gt;username.github.io&lt;/code&gt;. GitHub gives the option of hosting your markdown code in the master branch and static website 
code in the gh-pages branch. In our case we will be hosting just the static website code on the master branch, rather than two seperate branches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site/
apt-get install git
git init
git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
git remote add origin https://github.com/username/username.github.io.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-5-final-check&quot;&gt;Step 5. Final check:&lt;/h2&gt;
&lt;p&gt;Once your code is successfully pushed, you can go to the repository settings and confirm everything is working correctly.
&lt;code class=&quot;highlighter-pygments&quot;&gt;https://github.com/username/username.github.io/settings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code class=&quot;highlighter-pygments&quot;&gt;https://username.github.io/&lt;/code&gt; to see your website in action.&lt;/p&gt;

&lt;p&gt;Making changes and updating the website:
Repeat step 3b , 3c, 4  and 5
For step 4 repeat only&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
git remote add origin https://github.com/username/username.github.io.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;final-note&quot;&gt;Final note&lt;/h2&gt;
&lt;p&gt;If you still face any problems or have any questions, feel free to leave a comment and I will be happy to help. Cheers :)&lt;/p&gt;

&lt;p&gt;Check out the links below for detailed information: &lt;br /&gt;
&lt;a href=&quot;http://daverupert.com/2016/04/jekyll-on-windows-with-bash/&quot;&gt;Jekyll on Bash on Ubuntu on Windows&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://jekyll-windows.juthilo.com&quot;&gt;Run Jekyll on Windows&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Aug 2016 14:19:52 -0700</pubDate>
        <link>https://keeratsingh.github.io/blog/2016/setup-jekyll-blog-windows-10-bash-host-github-pages/</link>
        <guid isPermaLink="true">https://keeratsingh.github.io/blog/2016/setup-jekyll-blog-windows-10-bash-host-github-pages/</guid>
        
        
        <category>GitHub</category>
        
      </item>
    
      <item>
        <title>Welcome to my blog!</title>
        <description>&lt;p&gt;This is my first post.
I will be posting my experiences and helpful tutorials over the time, that I encounter while discovering new stuff.&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Aug 2016 11:04:52 -0700</pubDate>
        <link>https://keeratsingh.github.io/blog/2016/welcome-to-my-blog/</link>
        <guid isPermaLink="true">https://keeratsingh.github.io/blog/2016/welcome-to-my-blog/</guid>
        
        
        <category>First</category>
        
        <category>Post</category>
        
      </item>
    
  </channel>
</rss>
